name: Deploy Project

# Different ways to add multiple events.
#on: pull_request
#on: [pull_request, workflow_dispatch]
on:
  pull_request:
    #types: [opened]
    types:
      - opened    # triggled whena pull request is opened
    branches: 
      - main      # main
      - 'dev-*'   # dev-new, dev-this-is-new ...
      - 'dev_*'   # dev_new, dev_this_is_new ...
      - 'feat/**' # feat/new, feat/new/button ...
    paths-ignore:
      - '.github/workflows/*'

  workflow_dispatch:

  push:
    branches: [main, 'dev-*', 'dev_*', 'feat/**']
    paths-ignore:
      - '.github/workflows/*'

jobs:
  tests:
    runs-on: ubuntu-latest
    steps:
      - name: Get code
        uses: actions/checkout@v3

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: deps-node-modules-${{ hashFiles('**/package-lock.json') }}

      - name: Install node
        uses: actions/setup-node@v3
        with:
          node-version: 18
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run tests
        run: npm test

  build:
    needs: [tests]
    runs-on: ubuntu-latest
    outputs:
      # Add to the 'build' job an output named as script-file.
      # That output holds the output's target_file value of the step that has the id equals to 'publish'.
      script-file: ${{ steps.publish.outputs.target_file }}
    steps:
      - name: Get code
        uses: actions/checkout@v3

      - name: Install node
        uses: actions/setup-node@v3
        with:
          node-version: 18
      
      - name: Install dependencies
        run: npm ci
      
      - name: Build project
        run: npm run build

      - name: Publish JS filename
        id: publish   # Set in this step an identifier named as 'publish', so this step content can be accessed through this identifier
        run: find dist/assets/*.js -type f -execdir echo 'target_file={}' >> $GITHUB_OUTPUT ';'   # Set in the GITHUB_OUTPUT workflow enviroment file the key=value pair target_file=some_dist_asset_file.js

      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: dist-files  # Name the artifact so it can be used in other jobs
          path: dist

  deploy:
    needs: [build]
    runs-on: ubuntu-latest
    steps:
      - name: Get build artifacts
        uses: actions/download-artifact@v3
        with:
          name: dist-files  # Inform the name of the artifact that must be downloaded
      
      - name: Output contents
        run: ls

      - name: Output JS filename
        # The echo commands calls the github actions object 'needs' that contains all jobs's outputs.
        # Inside 'needs' object we call the job by name and then its output object, so finally we call the desired output value.
        run: echo "${{ needs.build.outputs.script-file }}"  
      
      - name: Deploy
        run: echo "Deploying ..."